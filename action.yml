name: 'Build HydePHP Site'
description: 'Build and deploy the HydePHP project'

inputs:
  debug:
    description: 'Enable debug mode'
    required: false
    default: "false"
  
  deploy:
    description: 'Specify what to do with the compiled site. Options are: [artifact]'
    required: true
    default: "artifact"

outputs:
  install-strategy:
    description: 'The install strategy used'
    value: ${{ steps.determine-install-strategy.outputs.install-strategy }}

runs:
  using: "composite"
  steps:
    - name: Validate input
      id: validate-input
      run: |
        if [[ "${{ inputs.deploy }}" != "artifact" ]]; then
          echo "Invalid input for deploy: ${{ inputs.deploy }}"
          exit 1
        fi
      shell: bash

    - name: Determine install strategy
      id: determine-install-strategy
      run: |
        if [[ -f composer.json ]]; then
          echo "install-strategy=composer" >> $GITHUB_OUTPUT
        else
          echo "install-strategy=archive" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Print debug information
      if: inputs.debug == 'true'
      run: |
        echo "Debug mode: ${{ inputs.debug }}"
        echo "Install strategy: ${{ steps.determine-install-strategy.outputs.install-strategy }}"
      shell: bash

    - name: Validate composer.json and composer.lock
      if: steps.determine-install-strategy.outputs.install-strategy == 'composer'
      run: composer validate --strict
      shell: bash

    - name: Cache Composer packages
      id: composer-cache
      if: steps.determine-install-strategy.outputs.install-strategy == 'composer'
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Download latest release
      if: steps.determine-install-strategy.outputs.install-strategy == 'archive'
      run: |
        # Copy all root files to backup directory
        cp -r . ../backup
        # Download latest version of HydePHP
        git clone https://github.com/hydephp/hyde.git ../hyde --depth 1
        # Copy HydePHP files to root
        cp -r ../hyde/* .
        # Copy Backup files to root
        cp -r ../backup/* .
      shell: bash

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-autoloader --no-dev && composer dump-autoload --quiet
      shell: bash

    - name: Build the site
      run: php hyde build --no-interaction --ansi
      shell: bash

    # Now that the site is built, there are a few options for deployment.
    # We could push directly to the gh-pages branch, commit files to /docs,
    # or even use the GitHub Pages action to deploy the compiled site.
    # We could also upload the site as an artifact for later use.
